--!csp build system based on xmake
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--
-- Copyright (C) 2022-present xqyjlj<xqyjlj@126.com>, csplink.github.io
--
-- @author      xqyjlj
-- @file        config_on_config.lua
--

import("core.base.option")
import("core.project.config")
import("core.project.project")
import("lib.detect.find_tool")

local logo =
    [[

          ______________ 
         / ___/ ___/ __ \
        / /__/__  / /_/ /
        \___/____/ .___/ 
                /_/      
                        by xqyjlj<xqyjlj@126.com>, csplink.github.io
]]

local manual = "https://csplink.github.io/#/getting_started"
local donate = "https://csplink.github.io/#/sponsor"
local title = ""
local copyright = "Copyright (C) 2022-present xqyjlj<xqyjlj@126.com>, csplink.github.io"
local footer =
    [[
    ${point_right}  ${bright}Manual${clear}: ${underline}${{manual}}${clear}
    ${pray}  ${bright}Donate${clear}: ${underline}${{donate}}${clear}
]]

local tool_builtinvars = {}
local sdk_builtinvars = {}

function pairs_by_keys(t)
    local a = {}
    for n in pairs(t) do
        a[#a + 1] = n -- create temporary tables
    end
    table.sort(a)
    local i = 0
    return function()
        i = i + 1
        return a[i], t[a[i]]
    end
end

-- export
function save()
    local configs = {}
    for optionname, option in pairs(project.options()) do
        configs[optionname] = option:value()
    end
    return io.save("csp.conf", configs, {orderkeys = true})
end

function get_git_builtinvars()
    local builtinvars = {}
    local cmds = {
        git_tag = {"describe", "--tags"},
        git_tag_long = {"describe", "--tags", "--long"},
        git_branch = {"rev-parse", "--abbrev-ref", "HEAD"},
        git_commit = {"rev-parse", "--short", "HEAD"},
        git_commit_long = {"rev-parse", "HEAD"},
        git_commit_date = {
            "log",
            "-1",
            "--date=format:%Y%m%d%H%M%S",
            "--format=%ad"
        }
    }
    local git = find_tool("git")
    if git then
        for name, argv in pairs(cmds) do
            local result
            result =
                try {
                function()
                    return os.iorunv(git.program, argv)
                end
            }
            if not result then
                result = "none"
            end
            builtinvars[name] = result:trim()
        end
    else
        builtinvars[name] = "not find git, please install git and add it to PATH."
    end
    return builtinvars
end

function generate_header()
    local header = {}
    for optionname, option in pairs(project.options()) do
        local info = {}
        local key = "/"

        -- init info object
        info.name = optionname
        info.description = option:info().description
        -- convert boolean to 1 and 0
        if option:value() == true then
            info.value = 1
        elseif option:value() == false then
            info.value = 0
        else
            info.value = option:value()
        end

        if option:info().category then
            key = option:info().category
        else
            key = "/" -- if not use set_category, then use default "/"
        end

        if not header[key] then
            header[key] = {} -- create new info table
        end

        header[key][info.name] = info
    end
    return header
end

function get_tool_builtinvars()
    os.cd(os.scriptdir())
    local builtinvars = get_git_builtinvars()
    os.cd("-")
    return builtinvars
end

function get_sdk_builtinvars()
    local builtinvars = get_git_builtinvars()
    return builtinvars
end

function generate_file(header)
    local t = {}
    table.insert(t, "/** ")
    table.insert(t, " * This file is automatically generated by the csp build system! Do not change!")
    table.insert(t, " *")
    table.insert(t, " * " .. title)
    table.insert(t, " * " .. copyright)
    for _, line in ipairs(logo:split("\n")) do
        table.insert(t, " * " .. line)
    end

    -- sdk urls
    table.insert(t, " *")
    table.insert(t, " * manual: " .. manual)
    table.insert(t, " * donate: " .. donate)

    -- tools vars
    table.insert(t, " *")
    table.insert(t, " * tools vars: ")
    for k, v in pairs_by_keys(tool_builtinvars) do
        table.insert(t, " *    " .. k .. ": " .. v)
    end

    -- sdk vars
    table.insert(t, " *")
    table.insert(t, " * sdk vars: ")
    for k, v in pairs_by_keys(sdk_builtinvars) do
        table.insert(t, " *    " .. k .. ": " .. v)
    end
    table.insert(t, " */") -- end

    -- macro
    table.insert(t, "#ifndef __CSP_CONFIG_H__")
    table.insert(t, "#define __CSP_CONFIG_H__")
    table.insert(t, "")
    for k, v in pairs_by_keys(sdk_builtinvars) do
        table.insert(t, "#define CSP_" .. k:upper() .. ' "' .. v .. '"')
    end

    for mk, mv in pairs_by_keys(header) do
        table.insert(t, "\n/* " .. mk .. " */")
        for k, v in pairs_by_keys(mv) do
            local description = ""
            local value = ""
            if v.description then
                description = " /* " .. v.description .. " */" -- add description
            end
            if type(v.value) == "string" then
                value = '"' .. v.value .. '"' -- string should be wrapped with ""
            else
                value = v.value
            end
            table.insert(t, "#define " .. k .. " " .. value .. description)
        end
    end
    table.insert(t, "\n#endif")
    return table.concat(t, "\n") .. "\n"
end

function show_logo()
    cprint("${bright green}" .. logo)
    footer = footer:gsub("${{manual}}", manual)
    footer = footer:gsub("${{donate}}", donate)
    cprint(footer)
end

function main(target)
    tool_builtinvars = get_tool_builtinvars()
    sdk_builtinvars = get_sdk_builtinvars()
    title =
        string.format(
        "csp build system %s+%s.%s, A cross-platform build system based on xmake",
        tool_builtinvars["git_tag"],
        tool_builtinvars["git_branch"],
        tool_builtinvars["git_commit"]
    )

    if option.get("menu") then
        cprint("${bright}" .. title)
        cprint("${bright}" .. copyright)
        show_logo()
        cprint("${bright green}config complete!")
    end
    save() -- export config to ${projectdir}/csp.conf
    local data = generate_file(generate_header())
    io.writefile("$(buildir)/csp_conf.h", data)
end
